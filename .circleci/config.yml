orbs:
  slack: circleci/slack@4.5.0
version: 2.1
executors:
  app-executor:
    docker:
      - image: circleci/node:12.19.0
    working_directory: ~/repo
  slack-executor:
    docker:
      - image: 'cimg/base:stable'
    resource_class: small
  docker-publisher:
    enviroment:
      IMAGE_NAME: bumbilo/cinema-app
    docker:
      - image: circleci/buildpack-deps:stretch
aliases:
  - &current-branch-name
    run:
      name: Show current branch
      command: echo ${CIRCLE_BRANCH}
  - &restore-cache
    restore_cache:
      keys:
        - app-{{ checksum "package.json" }}
        - app-
  - &install-dependecies
    run:
      name: Install dependencies
      command: npm install
  - &save-cache
    save_cache:
      paths:
        - node_modules
      key: app-{{ checksum "package.json" }}
  - &install-aws-cli
    run:
      name: Installing AWS CLI
      working_directory: /
      command: |
        sudo apt-get -y -qq update
        sudo apt-get install -y awscli
        sudo apt-get install -y python-pip python-dev build-essential
  - &build-project
      run:
        name: Build project
        command:  |
          npm install
          npm run build
          cd build
          zip ../build.zip -r * .[^.]*
          echo "Build successful"
jobs:
  build:
    executor: app-executor
    steps:
      - checkout
      - *current-branch-name
      - *restore-cache
      - *install-dependecies
      - *save-cache
  linting:
    executor: app-executor
    steps:
      - checkout
      - *current-branch-name
      - *restore-cache
      - run:
          name: Run linter
          command: npm run lint
  prettier:
    executor: app-executor
    steps:
      - checkout
      - *current-branch-name
      - *restore-cache
      - run:
          name: Run prettier check
          command: npm run prettier:check
  tests:
    executor: app-executor
    steps:
      - checkout
      - *current-branch-name
      - *restore-cache
      - run:
          name: Run tests
          command: npm run test
  publish-to-docker-hub:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - *restore-cache
      - run: docker login -u "${DOCKER_HUB_USER}" -p "${DOCKER_HUB_PASSWORD}"
      - run: docker build -t ${IMAGE_NAME}:latest .
      - run:
          name: Tag and push to docker hub
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:production-${CIRCLE_BUILD_NUM"} && docker push ${IMAGE_NAME}:production-${CIRCLE_BUILD_NUM"}
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:staging-${CIRCLE_BUILD_NUM"} && docker push ${IMAGE_NAME}:staging-${CIRCLE_BUILD_NUM"}
            elif [ "${CIRCLE_BRANCH}" == "develop" ]
            then
              docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:develop-${CIRCLE_BUILD_NUM"} && docker push ${IMAGE_NAME}:develop-${CIRCLE_BUILD_NUM"}
            fi
  deploy-aws-s3:
    executor: app-executor
    steps:
      - checkout
      - *current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS S3
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_PROD_BUCKET} --delete
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_STAGING_BUCKET} --delete
            elif [ "${CIRCLE_BRANCH}" == "develop" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_DEV_BUCKET} --delete
            fi
  deploy-cloud-front:
    executor: app-executor
    steps:
      - checkout
      - *current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS Cloud front
          command: |
            aws configure set preview.cloudfront true
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              aws cloudfront create-invalidation --distribution-id ${ASW_PROD_DISTRIBUTION_ID} --paths /\*
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              aws cloudfront create-invalidation --distribution-id ${ASW_STAGING_DISTRIBUTION_ID} --paths /\*
            elif [ "${CIRCLE_BRANCH}" == "develop" ]
            then
              aws cloudfront create-invalidation --distribution-id ${ASW_DEV_DISTRIBUTION_ID} --paths /\*
            fi
  notify-slack:
    executor: slack-executor
    steps:
      - run: echo "Slack norification"
      - slack/notify:
          event: 'always'
          channel: 'cinema-circleci'
          template: ''
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${CIRCLE_BRANCH} branch deployment to S3 has been completed üëç"
                  }
                },
               {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*:\n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch *:\n$CIRCLE_BRANCH"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*When*:\n$(date +'%d/%m/%Y')"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Build*:\n$CIRCLE_BUILD_NUM"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*User*:\n$CIRCLE_USERNAME"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }

workflows:
  build_and_deploy:
    jobs:
      - build
      - linting:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - prettier:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - tests:
          requires:
            - linting
            - prettier
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - publish-to-docker-hub:
          requires:
            - tests
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - deploy-aws-s3:
          requires:
            - publish-to-docker-hub
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - deploy-cloud-front:
          requires:
            - deploy-aws-s3
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - notify-slack:
          requires:
            - deploy-cloud-front
          filters:
            branches:
              only:
                - develop
                - staging
                - master
